version_control:
  # Where is the git log located locally?
  # This is the path to the .git of the project repository you are analyzing.
  # The .git is hidden, so you can see it using `ls -a`

  # junit3.7 doesn't have git log, but still specify the git_log path on the config file, so the folder location can be extracted for the Notebook.

  log: ../../rawdata/git_repo/junit3.7/.git
  # From where the git log was downloaded?
  # log_url: junit3.7 doesn't have git log
  # List of branches used for analysis
  # branch:
  # - main

filter:
  keep_filepaths_ending_with:
    - cpp
    - c
    - h
    - java
    - js
    - py
    - cc
  remove_filepaths_containing:
    - samples
    - Test
    - tests

tool:
  # Depends allow to parse file-file static dependencies.
  depends:
    # accepts one language at a time: cpp, java, ruby, python, pom
    # You can obtain this information on OpenHub or the project GiHub page right pane.
    code_language: java
    # Specify which types of Dependencies to keep - see the Depends tool README.md for details.
    keep_dependencies_type:
      - Cast
      - Call
      - Import
      - Return
      - Set
      - Use
      - Implement
      - ImplLink
      - Extend
      - Create
      - Throw
      - Parameter
      - Contain
  dv8:
    # The project folder path to store various intermediate
    # files for DV8 Analysis
    # The folder name will be used in the file names.
    folder_path: ../../analysis/dv8/junit
    # the architectural flaws thresholds that should be used
    architectural_flaws:
      cliqueDepends:
        - call
        - use
      crossingCochange: 2
      crossingFanIn: 4
      crossingFanOut: 4
      mvCochange: 2
      uiCochange: 2
      uihDepends:
        - call
        - use
      uihInheritance:
        - extend
        - implement
        - public
        - private
        - virtual
      uiHistoryImpact: 10
      uiStructImpact: 0.01
  # Uctags allows finer file-file dependency parsing (e.g. functions, classes, structs)
  uctags:
    # See https://github.com/sailuh/kaiaulu/wiki/Universal-Ctags for details
    # What types of file-file dependencies should be considered? If all
    # dependencies are specified, Kaiaulu will use all of them if available.
    keep_lines_type:
#      c:
#        - f # function definition
#      cpp:
#        - c # classes
#        - f # function definition
      java:
        - c # classes
#        - m # methods
#      python:
#        - c # classes
#        - f # functions
#      r:
#        - f # functions
  # srcML allow to parse src code as text (e.g. identifiers)
  srcml:
    # The file path to where you wish to store the srcml output of the project
    srcml_path: ../../analysis/junit/srcml_junit3.7.xml
  pattern4:
    class_folder_path: ../../rawdata/git_repo/junit3.7/junit
    output_filepath: ../../analysis/pattern4/junit3.7_gof.xml
    compile_note: >
      1. Switch Java version to Java 17:
         https://stackoverflow.com/questions/69875335/macos-how-to-install-java-17
      2. Disable VPN to pull modules from Gradle Plugin Portal.
      3. Use sudo ./gradlew build
      4. After building, locate the engine class files and specify as the class_folder_path:
         in this case they are in: /path/to/junit5/junit-platform-engine/build/classes/java/main/org/junit/platform/engine/
# Analysis Configuration #
analysis:
  # A list of topic and keywords (see src_text_showcase.Rmd).
  topics:
    topic_1:
      - model
      - view
      - controller
    topic_2:
      - visitor
    topic_3:
      - observer
      - listener
    topic_4:
      - adapter
    topic_5:
      - decorator
    topic_6:
      - factory
      - builder
    topic_7:
      - facade
    topic_8:
      - strategy
    topic_9:
      - command
